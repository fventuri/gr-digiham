/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(mbe_synthesizer_codecserver.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(49af28db52790765c309cd3b8fac7019)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digiham/mbe_synthesizer_codecserver.h>
// pydoc.h is automatically generated in the build directory
#include <mbe_synthesizer_codecserver_pydoc.h>

template <typename... Args>
using overload_cast_ = py::detail::overload_cast_impl<Args...>;

void bind_mbe_synthesizer(py::module& m)
{

    using mbe_synthesizer    = gr::digiham::mbe_synthesizer;


    py::class_<mbe_synthesizer, gr::block, gr::basic_block,
        std::shared_ptr<mbe_synthesizer>> synthesizer(m, "mbe_synthesizer", D(mbe_synthesizer));

        synthesizer.def(py::init(overload_cast_<mbe_synthesizer::DVMbeType>()(&mbe_synthesizer::make)),
                      py::arg("type"),
                      D(mbe_synthesizer,make)
        );
        
        synthesizer.def(py::init(overload_cast_<unsigned int, unsigned int>()(&mbe_synthesizer::make)),
                      py::arg("index"),
                      py::arg("bitrate"),
                      D(mbe_synthesizer,make)
        );
        
        synthesizer.def(py::init(overload_cast_<short*>()(&mbe_synthesizer::make)),
                      py::arg("cwds"),
                      D(mbe_synthesizer,make)
        );
        

        synthesizer.def("set_mode",
                        overload_cast_<mbe_synthesizer::DVMbeType>()(&mbe_synthesizer::set_mode),
                        py::arg("type"),
                        D(mbe_synthesizer, set_mode));

        synthesizer.def("set_mode",
                        overload_cast_<unsigned int, unsigned int>()(&mbe_synthesizer::set_mode),
                        py::arg("index"),
                        py::arg("bitrate"),
                        D(mbe_synthesizer, set_mode));

        synthesizer.def("set_mode",
                        overload_cast_<short*>()(&mbe_synthesizer::set_mode),
                        py::arg("cwds"),
                        D(mbe_synthesizer, set_mode));


    py::enum_<mbe_synthesizer::DVMbeType>(synthesizer, "Type")
        .value("DMR", mbe_synthesizer::DVMbeType::DMR)
        .value("DStar", mbe_synthesizer::DVMbeType::DStar)
        .value("YSF", mbe_synthesizer::DVMbeType::YSF)
        .export_values();


}








