/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(rrc_filter.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(12fcf657143c99e394791bfdd32f2ac8)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digiham/rrc_filter.h>
// pydoc.h is automatically generated in the build directory
#include <rrc_filter_pydoc.h>

template <typename... Args>
using overload_cast_ = py::detail::overload_cast_impl<Args...>;

void bind_rrc_filter(py::module& m)
{

    using rrc_filter    = gr::digiham::rrc_filter;


    py::class_<rrc_filter, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<rrc_filter>> filter(m, "rrc_filter", D(rrc_filter));

    filter.def(py::init(overload_cast_<unsigned int, double, const float[]>()(&rrc_filter::make)),
             py::arg("n_zeros"),
             py::arg("gain"),
             py::arg("coeffs"),
             D(rrc_filter,make)
          );
        
    filter.def(py::init(overload_cast_<rrc_filter::RrcFilterType>()(&rrc_filter::make)),
             py::arg("type"),
             D(rrc_filter,make)
          );
        

    py::enum_<rrc_filter::RrcFilterType>(filter, "Type")
        .value("Narrow", rrc_filter::RrcFilterType::Narrow)
        .value("Wide", rrc_filter::RrcFilterType::Wide)
        .export_values();


}








